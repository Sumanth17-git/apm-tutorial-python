name: CI/CD Deploy apm-tutorial-python with Datadog

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Copy files to VM
        run: |
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no" ./ ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:/home/terraform17/apm-tutorial-python
      - name: Deploy Flask App with Datadog APM
        run: |
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            set -e
            cd /home/terraform17/apm-tutorial-python
      
            # Create Python venv if not exists
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi
            source venv/bin/activate
      
            # Install/update dependencies
            pip install --upgrade pip
            pip install -r requirements.txt
      
            # Kill old process if running
            pkill -f "ddtrace-run" || true
      
            # Run app in background using your script
            nohup ./run_notes_app.sh > app.log 2>&1 &
      
            # Give app a few seconds to start
            sleep 5
      
            # Check if app is running
           # Check if app responds on port 8080
                if curl -s http://127.0.0.1:8080/ > /dev/null; then
                  echo "✅ Flask app is running and responding on port 8080"
                else
                  echo "❌ Flask app did not respond. Showing logs:"
                  tail -n 50 app.log
                  exit 1
                fi
          EOF
      - name: Report Deployment to Datadog
        run: |
          npm install -g @datadog/datadog-ci
          datadog-ci dora deployment start \
            --service notes \
            --env prod \
            --version ${{ github.sha }} \
            --repository ${{ github.repository }} \
            --sha ${{ github.sha }} \
            --datadog-api-key ${{ secrets.DD_API_KEY }} \
            --datadog-site ${{ secrets.DD_SITE }}
