name: CI/CD Deploy apm-tutorial-python with Datadog

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Copy files to VM
        run: |
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no" ./ ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:/home/terraform17/apm-tutorial-python
      - name: Deploy Flask App with Datadog APM
        run: |
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            set -e
            cd /home/terraform17/apm-tutorial-python
      
            # Create Python venv if not exists
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi
            source venv/bin/activate
      
            # Install/update dependencies
            pip install --upgrade pip
            pip install -r requirements.txt
      
            # Kill old process if running
            pkill -f "ddtrace-run" || true
            pkill -f "gunicorn" || true
            
            # Pass GitHub metadata + Datadog tags to app
            export GITHUB_SHA="${GITHUB_SHA}"
            export GITHUB_REPOSITORY="${GITHUB_REPOSITORY}"
            export DD_ENV="prod"
            export DD_VERSION="${GITHUB_SHA}"
            # Run app in background using your script
            nohup ./run_notes_app.sh > app.log 2>&1 &
      
            # Give app a few seconds to start
            sleep 5
      
            # Check if app is running
           # Check if app responds on port 8080
               # if curl -s http://127.0.0.1:9999/ > /dev/null; then
                if curl -s http://127.0.0.1:8080/ > /dev/null; then
                  echo "✅ Flask app is running and responding on port 8080"
                else
                  echo "❌ Flask app did not respond. Showing logs:"
                  tail -n 50 app.log
                  exit 1
                fi
          EOF
      - name: Report Deployment to Datadog (API)
        run: |
          deploy_start=$(date +%s%N)
          deploy_end=$(date +%s%N)
      
          curl -X POST "https://api.${{ secrets.DD_SITE }}/api/v2/dora/deployment" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: ${{ secrets.DD_API_KEY }}" \
            -d @- <<EOF
            {
              "data": {
                "attributes": {
                  "service": "notes",
                  "env": "prod",
                  "version": "${{ github.sha }}",
                  "started_at": $deploy_start,
                  "finished_at": $deploy_end,
                  "git": {
                    "commit_sha": "${{ github.sha }}",
                    "repository_url": "https://github.com/${{ github.repository }}"
                  },
                  "team": "sre",
                  "custom_tags": [
                    "project:notes-app",
                    "deployer:github-actions"
                  ]
                }
              }
            }
          EOF
      - name: Report Incident to Datadog (on failure)
        if: failure()   # runs only if deployment failed
        run: |
          incident_start=$(date +%s%N)
          incident_end=$((incident_start + 5000000000))   # +5s to avoid validation error

          curl -X POST "https://api.${{ secrets.DD_SITE }}/api/v2/dora/incident" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: ${{ secrets.DD_API_KEY }}" \
            -d @- <<EOF
          {
            "data": {
              "attributes": {
                "services": ["notes"],
                "started_at": $incident_start,
                "finished_at": $incident_end,
                "env": "prod",
                "name": "Notes API deployment failure",
                "severity": "high",
                "version": "${{ github.sha }}",
                "git": {
                  "commit_sha": "${{ github.sha }}",
                  "repository_url": "https://github.com/${{ github.repository }}"
                }
              }
            }
          }
          EOF
